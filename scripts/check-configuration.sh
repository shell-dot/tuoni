#!/bin/bash

set -e

env_path="$PROJECT_ROOT/config/tuoni.env"
config_path="$PROJECT_ROOT/config/tuoni.yml"

if [ ! -f "$PROJECT_ROOT/config/tuoni.env" ]; then
    echo "INFO | config/tuoni.env file not found, creating ..."
    cp $PROJECT_ROOT/config/example/example.tuoni.env ${env_path}
fi

if [ ! -f "$PROJECT_ROOT/config/tuoni.yml" ]; then
    echo "INFO | config/tuoni.yml file not found, creating ..."
    cp $PROJECT_ROOT/config/example/example.tuoni.yml ${config_path}
    AUTOGENERATED_USERNAME=tuoni
    AUTOGENERATED_PASSWORD=$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 32)
    echo "DEBUG | AUTOGENERATED_USERNAME: $AUTOGENERATED_USERNAME"
    echo "DEBUG | AUTOGENERATED_PASSWORD: $AUTOGENERATED_PASSWORD"
    sed -i "s/\(username: \).*/\1$AUTOGENERATED_USERNAME/" "${config_path}"
    sed -i "s/^\(\s*password: \).*/\1$AUTOGENERATED_PASSWORD/" "${config_path}"
fi

for dir in data logs payload-templates plugins; do
    if [ ! -d "$PROJECT_ROOT/$dir" ]; then
        echo "INFO | $dir directory not found, creating ..."
        mkdir "$PROJECT_ROOT/$dir"
    fi
done

if [ ! -f "$PROJECT_ROOT/ssl/server/server-selfsigned.keystore" ]; then
    echo "INFO | ssl/server/server-selfsigned.keystore file not found, creating ..."
    echo $PROJECT_ROOT
    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/server:/tmp" -v "${PROJECT_ROOT}/ssl/server:/tmp/hsperfdata_root" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      keytool -genkey -alias selfsigned \
      -keyalg RSA \
      -keystore server-selfsigned.keystore \
      -validity 3650\
      -storetype JKS \
      -dname "CN=localhost, OU=Tuoni, O=ShellDot, L=Tallinn, C=Estonia" \
      -keypass selfsigned -storepass \
      selfsigned
    ${SUDO_COMMAND} rmdir "${PROJECT_ROOT}/ssl/server/hsperfdata_root"
fi

if [ ! -f "$PROJECT_ROOT/ssl/server/server-private.pem" ]; then
    echo "INFO | ssl/server/server-private.pem file not found, creating ..."
    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/server:/tmp" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      openssl genpkey -algorithm RSA -out server.pem -pkeyopt rsa_keygen_bits:2048
    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/server:/tmp" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      openssl rsa -pubout -in server.pem -out server-public.pem
    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/server:/tmp" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      openssl pkcs8 -topk8 -in server.pem -nocrypt -out server-private.pem
fi

if [ ! -f "$PROJECT_ROOT/ssl/client/client-private.pem" ]; then
    echo "INFO | ssl/client/client-private.pem file not found, creating ..."
    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/client:/tmp" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      openssl genpkey -algorithm RSA -out client-private.pem -pkeyopt rsa_keygen_bits:2048

    ${SUDO_COMMAND} docker run --rm -v "${PROJECT_ROOT}/ssl/client:/tmp" -w /tmp --user "$UID:$UID" openjdk:21-jdk-slim-bookworm \
      openssl req -new -key client-private.pem -x509 -days 365 -out client.crt -subj "/C=EE/ST=YourState/L=YourCity/O=YourOrganization/CN=yourdomain.com"
fi

${SUDO_COMMAND} chown $USER:$USER -R "${PROJECT_ROOT}/ssl"
${SUDO_COMMAND} chmod +r "${PROJECT_ROOT}/ssl"/*
